# Import necessary libraries
import face_recognition
import cv2
import numpy as np
import csv
from datetime import datetime

# Load images and encodings for known faces
# Replace "Photos/ajay.jpg" with the path to the image file
ajay_image = face_recognition.load_image_file("Photos/ajay.jpg")
ajay_encoding = face_recognition.face_encodings(ajay_image)[0]

# Repeat the same process for other known faces
# Replace "Photos/sakshi.jpg" with the path to the image file
sakshi_image = face_recognition.load_image_file("Photos/sakshi.jpg")
sakshi_encoding = face_recognition.face_encodings(sakshi_image)[0]

# Replace "Photos/arya.jpg" with the path to the image file
arya_image = face_recognition.load_image_file("Photos/arya.jpg")
arya_encoding = face_recognition.face_encodings(arya_image)[0]

# Create lists of known face encodings and names
known_face_encodings = [ajay_encoding, sakshi_encoding, arya_encoding]
known_face_names = ["ajay", "sakshi", "arya"]

# Create a copy of known face names to track attendance
students = known_face_names.copy()

# Initialize video capture from default camera
video_capture = cv2.VideoCapture(0)

# Create a CSV file for attendance logging with current date and time
now = datetime.now()
current_date = now.strftime("%Y-%m-%d_%H-%M-%S")
csv_filename = current_date + '_attendance.csv'

# Open the CSV file in write mode and create a writer object
with open(csv_filename, 'w+', newline='') as csv_file:
    csv_writer = csv.writer(csv_file)
    csv_writer.writerow(['Name', 'Time'])

    # Start an infinite loop for video capture and processing
    while True:
        _, frame = video_capture.read()  # Read a frame from the video capture
        small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)  # Resize the frame
        rgb_small_frame = small_frame[:, :, ::-1]  # Convert BGR to RGB

        # Detect face locations and encodings in the frame
        face_locations = face_recognition.face_locations(rgb_small_frame)
        face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)

        face_names = []  # Initialize list to store recognized face names
        # Iterate through detected face encodings
        for face_encoding in face_encodings:
            matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
            name = "Unknown"

            # If a match is found, assign the corresponding name
            if True in matches:
                first_match_index = matches.index(True)
                name = known_face_names[first_match_index]

            face_names.append(name)  # Append the recognized name to the list

            # If the recognized name is in the list of students, remove it and log the time
            if name in students:
                students.remove(name)
                current_time = now.strftime("%H:%M:%S")
                csv_writer.writerow([name, current_time])

        # Draw rectangles and labels around detected faces in the frame
        for (top, right, bottom, left), name in zip(face_locations, face_names):
            top *= 4
            right *= 4
            bottom *= 4
            left *= 4

            cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
            font = cv2.FONT_HERSHEY_DUPLEX
            cv2.putText(frame, name, (left + 6, bottom - 6), font, 0.5, (255, 255, 255), 1)

        # Display the frame with rectangles and labels
        cv2.imshow("Attendance System", frame)

        # Check for the 'q' key press to exit the loop
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

# Release the video capture and close all OpenCV windows
video_capture.release()
cv2.destroyAllWindows()
